Sub ProcessErrors()
    Dim wsDB As Worksheet, wsSOP As Worksheet
    Dim lastRowDB As Long, lastRowSOP As Long, i As Long, j As Long
    Dim errorText As String, vendorText As String, status As String, resolution As String
    Dim sopDict As Object
    Dim descText As String
    Dim regexError As Object, regexVendor As Object, regexNumbers As Object, regexInvoice As Object
    Dim matches As Object
    Dim rng As Range
    Dim dict As Object
    
    Set dict = CreateObject("Scripting.Dictionary")

    ' Set worksheet references
    Set wsDB = ThisWorkbook.Sheets("DB_Errors")
    Set wsSOP = ThisWorkbook.Sheets("SOP_Errors")

    ' Find last row in DB_Errors and SOP_Errors
    lastRowDB = wsDB.Cells(wsDB.Rows.Count, 1).End(xlUp).Row
    lastRowSOP = wsSOP.Cells(wsSOP.Rows.Count, 1).End(xlUp).Row

    ' Create dictionary for SOP errors
    Set sopDict = CreateObject("Scripting.Dictionary")

    ' Load SOP errors and resolutions into dictionary
    For j = 2 To lastRowSOP
        If Not IsEmpty(wsSOP.Cells(j, 1).Value) Then
            sopDict(wsSOP.Cells(j, 1).Value) = wsSOP.Cells(j, 2).Value
        End If
    Next j

    ' Insert headers if not already present
    wsDB.Cells(1, 11).Value = "Description"       ' Column K
    wsDB.Cells(1, 12).Value = "Error Type"        ' Column L
    wsDB.Cells(1, 13).Value = "Vendor Name"            ' Column M
    wsDB.Cells(1, 14).Value = "Invoice Number"           ' Column N
    wsDB.Cells(1, 15).Value = "Status"            ' Column O
    wsDB.Cells(1, 16).Value = "Resolution Comments" ' Column P

    ' Format headers
    wsDB.Range("K1:P1").Font.Bold = True
    wsDB.Range("K1:P1").Interior.Color = RGB(255, 255, 0) ' Yellow background

    ' Create Regex for extracting "Error# ..." onwards
    Set regexError = CreateObject("VBScript.RegExp")
    regexError.Pattern = "(Error#.*)"
    regexError.IgnoreCase = True
    regexError.Global = False

    ' Create Regex for checking if Error Type contains numbers
    Set regexNumbers = CreateObject("VBScript.RegExp")
    regexNumbers.Pattern = "\d"
    regexNumbers.IgnoreCase = True
    regexNumbers.Global = False

    ' Create Regex for extracting "Vendor# ..." onwards (only the name)
    Set regexVendor = CreateObject("VBScript.RegExp")
    regexVendor.Pattern = "(Vendor#\s*(\w+\s*\w*))"
    regexVendor.IgnoreCase = True
    regexVendor.Global = False

    ' Create Regex for extracting "Invoice# <Number>"
    Set regexInvoice = CreateObject("VBScript.RegExp")
    regexInvoice.Pattern = "(Invoice#\s*\d+)"
    regexInvoice.IgnoreCase = True
    regexInvoice.Global = False

    ' Loop through DB_Errors to process data
    For i = 2 To lastRowDB
        ' Copy data from A to J with a new line after each column
        descText = ""
        For j = 1 To 10
            If Not IsEmpty(wsDB.Cells(i, j).Value) Then
                descText = descText & wsDB.Cells(i, j).Value & vbNewLine
            End If
        Next j

        ' Store Description and apply wrap text
        wsDB.Cells(i, 11).Value = descText
        wsDB.Cells(i, 11).WrapText = True
        wsDB.Rows(i).AutoFit ' Auto-adjust row height for better visibility
        wsDB.Cells(i, 11).Interior.Color = RGB(255, 255, 255) ' Change to White (Default)

        ' Extract "Error# ..." onwards from Description using Regex
        errorText = ""
        If regexError.Test(descText) Then
            Set matches = regexError.Execute(descText)
            If matches.Count > 0 Then
                errorText = matches(0).SubMatches(0)
                ' Check if the error contains a number
                If regexNumbers.Test(errorText) Then
                    errorText = "" ' Blank out Error Type if it contains numbers
                End If
            End If
        End If
        wsDB.Cells(i, 12).Value = errorText ' Column L (Error Type)

        ' Extract "Vendor# ..." onwards from Description using Regex (only name)
        vendorText = ""
        If regexVendor.Test(descText) Then
            Set matches = regexVendor.Execute(descText)
            If matches.Count > 0 Then
                vendorText = matches(0).SubMatches(1) ' Extract the name part
            End If
        End If
        wsDB.Cells(i, 13).Value = vendorText ' Column M (Vendor)

        ' Extract "Invoice# <Number>" from Description using Regex
        Dim invoiceText As String
        invoiceText = ""
        If regexInvoice.Test(descText) Then
            Set matches = regexInvoice.Execute(descText)
            If matches.Count > 0 Then
                invoiceText = matches(0).SubMatches(0)
            End If
        End If
        wsDB.Cells(i, 14).Value = invoiceText ' Column N (Invoice)

        ' Match against SOP errors even if Error Type is blank
        resolution = ""
        status = ""
        
        For Each key In sopDict.Keys
            If InStr(descText, key) > 0 Then
                resolution = sopDict(key)
                status = "Matched"
                Exit For
            End If
        Next key

        ' If no match is found, mark as unmatched
        If resolution = "" Then
            status = "Unmatched"
        End If

        ' Populate Status and Resolution Comments columns
        wsDB.Cells(i, 15).Value = status  ' Column O (Status)
        wsDB.Cells(i, 16).Value = resolution ' Column P (Resolution Comments)

        ' Apply conditional formatting
        If status = "Matched" Then
            wsDB.Cells(i, 15).Interior.Color = RGB(144, 238, 144) ' Light Green
        ElseIf status = "Unmatched" Then
            wsDB.Cells(i, 15).Interior.Color = RGB(255, 182, 193) ' Light Red
        End If
    Next i

    ' Adjust column width dynamically
    wsDB.Columns("K").ColumnWidth = 50 ' Set optimal width for description
    wsDB.Columns("K").WrapText = True ' Ensure text wraps properly
    wsDB.Columns("M").ColumnWidth = 20 ' Set minimum width for Vendor
    wsDB.Columns("N").ColumnWidth = 25 ' Set minimum width for Invoice
    wsDB.Rows.AutoFit ' Adjust all row heights to fit text properly

    ' Autofit remaining columns
    wsDB.Columns("L:P").AutoFit

    ' Apply borders **ONLY to K (Description) and O (Status) columns**
    Dim borderColumns As Variant
    borderColumns = Array("K", "O") ' Columns where borders should be applied
    
    Dim col As Variant
    For Each col In borderColumns
        Set rng = wsDB.Range(col & "1:" & col & lastRowDB)
        With rng.Borders
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
    Next col

    ' Apply top alignment to L (Error Type), M (Vendor), and N (Invoice)
    wsDB.Range("L2:N" & lastRowDB).HorizontalAlignment = xlLeft
    wsDB.Range("L2:N" & lastRowDB).VerticalAlignment = xlTop

    ' Cleanup
    Set sopDict = Nothing
    Set regexError = Nothing
    Set regexVendor = Nothing
    Set regexNumbers = Nothing
    Set regexInvoice = Nothing
    
    ' Freeze the first row
    wsDB.Activate
    wsDB.Rows("2:2").Select
    ActiveWindow.FreezePanes = True

    MsgBox "Error processing completed!", vbInformation, "Process Complete"
End Sub

